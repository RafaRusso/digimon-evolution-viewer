# Docker Compose para Digimon Evolution
version: '3.8'

services:
  # API Backend
  api:
    build:
      context: ./digimon-api
      target: dev
    container_name: digimon-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - CORS_ORIGIN=http://localhost:5173
      - RATE_LIMIT_MAX=1000
      - RATE_LIMIT_WINDOW=60000
      - LOG_LEVEL=info
    volumes:
      - ./digimon-api/src:/app/src
      - ./digimon-api/package.json:/app/package.json
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - digimon-network

    # Frontend React (com correções)
  frontend:
    build:
      context: ./digimon-frontend
      target: dev
    container_name: digimon-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_DEV_MODE=true
    volumes:
      # 1. Mapeia todo o diretório do projeto para /app no contêiner.
      - ./digimon-frontend:/app
      # 2. (IMPORTANTE ) Cria um volume anônimo para node_modules.
      #    Isso impede que o node_modules local sobrescreva o do contêiner,
      #    resolvendo o erro e melhorando a performance.
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    networks:
      - digimon-network

networks:
  digimon-network:
    driver: bridge
