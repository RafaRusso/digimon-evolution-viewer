#!/bin/bash

# Script de build para Digimon Evolution
set -e

echo "üöÄ Iniciando build do Digimon Evolution..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    error "Docker n√£o est√° rodando. Inicie o Docker e tente novamente."
fi

# Verificar se docker-compose est√° dispon√≠vel
if ! command -v docker-compose > /dev/null 2>&1; then
    error "docker-compose n√£o est√° instalado."
fi

# Verificar se arquivo .env existe
if [ ! -f .env ]; then
    warning "Arquivo .env n√£o encontrado. Copiando .env.docker.example..."
    cp .env.docker.example .env
    warning "Configure o arquivo .env com suas vari√°veis antes de continuar."
    exit 1
fi

# Carregar vari√°veis de ambiente
source .env

# Verificar vari√°veis obrigat√≥rias
if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_ANON_KEY" ]; then
    error "Vari√°veis SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias no arquivo .env"
fi

# Escolher modo de build
MODE=${1:-dev}

case $MODE in
    "dev"|"development")
        log "Modo de desenvolvimento selecionado"
        COMPOSE_FILE="docker-compose.yml"
        ;;
    "prod"|"production")
        log "Modo de produ√ß√£o selecionado"
        COMPOSE_FILE="docker-compose.prod.yml"
        ;;
    *)
        error "Modo inv√°lido. Use 'dev' ou 'prod'"
        ;;
esac

# Parar containers existentes
log "Parando containers existentes..."
docker-compose -f $COMPOSE_FILE down --remove-orphans

# Limpar imagens antigas (opcional)
if [ "$2" = "--clean" ]; then
    log "Limpando imagens antigas..."
    docker system prune -f
    docker image prune -f
fi

# Build das imagens
log "Construindo imagens Docker..."
docker-compose -f $COMPOSE_FILE build --no-cache

# Verificar se build foi bem-sucedido
if [ $? -eq 0 ]; then
    success "Build conclu√≠do com sucesso!"
else
    error "Falha no build"
fi

# Iniciar containers
log "Iniciando containers..."
docker-compose -f $COMPOSE_FILE up -d

# Aguardar servi√ßos ficarem prontos
log "Aguardando servi√ßos ficarem prontos..."
sleep 10

# Verificar health checks
log "Verificando status dos servi√ßos..."

# Verificar API
API_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/health || echo "000")
if [ "$API_HEALTH" = "200" ]; then
    success "API est√° rodando (http://localhost:3001)"
else
    warning "API pode n√£o estar pronta ainda (status: $API_HEALTH)"
fi

# Verificar Frontend
FRONTEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5173 || echo "000")
if [ "$FRONTEND_HEALTH" = "200" ]; then
    success "Frontend est√° rodando (http://localhost:5173)"
else
    warning "Frontend pode n√£o estar pronto ainda (status: $FRONTEND_HEALTH)"
fi

# Mostrar logs se houver problemas
if [ "$API_HEALTH" != "200" ] || [ "$FRONTEND_HEALTH" != "200" ]; then
    warning "Mostrando logs dos containers..."
    docker-compose -f $COMPOSE_FILE logs --tail=20
fi

echo ""
success "üéâ Deploy conclu√≠do!"
echo ""
echo "üìã Servi√ßos dispon√≠veis:"
echo "   üîó Frontend: http://localhost:5173"
echo "   üîó API: http://localhost:3001"
echo "   üîó API Docs: http://localhost:3001/docs"
echo "   üîó Health Check: http://localhost:3001/health"
echo ""
echo "üìù Comandos √∫teis:"
echo "   docker-compose -f $COMPOSE_FILE logs -f    # Ver logs em tempo real"
echo "   docker-compose -f $COMPOSE_FILE down       # Parar containers"
echo "   docker-compose -f $COMPOSE_FILE restart    # Reiniciar containers"
echo ""
